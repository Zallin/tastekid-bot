var https = require('https'),
    config = require('./config.json'),
    querystring = require('querystring'),
    events = require('events'),
    nodeUtils = require('util'),
    utils = require('./utils.js');

function ApiClient (){
  this.update_id = 0;
  this.getUpdates = function (){    var opts = {      apiMethod : 'getUpdates',      body : {        offset : this.update_id + 1      }    }    var self = this;    this._request(opts, function (res){      if(res.ok){        if(res.result.length > 0){          var l = res.result.length - 1;          self.update_id = res.result[l].update_id;          for(var i = 0; i < res.result.length; i++){            self.handleQuery(res.result[i]);          }        }        self.getUpdates();      } else {        throw new Error('Telegram API interaction error');      }    });  }  this._request = function (opts, fn){    var body = new Buffer(querystring.stringify(opts.body));    var reqOpts = {      hostname : 'api.telegram.org',      path : '/bot' + config.telegram_api_key + '/' + opts.apiMethod,      method : 'GET',      headers : {        "Content-Type" : 'application/x-www-form-urlencoded',        "Content-Length" : body.length      }    }    var req = https.request(reqOpts, function (res){      var bufs = [];      res.on('data', function (chunk){        bufs.push(chunk);      });      res.on('end', function (){        var buf = Buffer.concat(bufs);        fn(JSON.parse(buf));      });    });    req.on('error', function (e){      throw e;    });    req.write(body);    req.end();  }  this.handleQuery = function (req){    var query = utils.parseQuery(req.message.text);    if(query){      if(this.listeners(query.command).length > 0){        req.query = query;        this.emit(query.command, req);      } else {        this.sendMessage('No such command is supported', req);      }    } else {      this.sendMessage('Invalid query', req);    }  }  this.sendMessage = function (text, req){    var opts = {      apiMethod : 'sendMessage',      body : {        chat_id : req.message.chat.id,        text : text,        reply_to_message_id : req.message.message_id      }    }    this._request(opts, function (res){      // a bit of logging?    });  }}nodeUtils.inherits(ApiClient, events.EventEmitter);module.exports = new ApiClient();